name: Build, Deploy and Manage Bot

on:
  # 1. Позволяет запускать воркфлоу вручную из вкладки Actions в GitHub
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'build_and_deploy'
        type: choice
        options:
          - build_and_deploy
          - build_only
          - deploy_only
          - stop
      image_tag:
        description: 'Image tag to deploy (for deploy_only action)'
        required: false
        default: 'latest'

  # 2. Автоматически запускает сборку и деплой при пуше в `main`
  push:
    branches:
      - main

jobs:
  build:
    name: Build Docker Image
    # Запускаем сборку если:
    # - это пуш в main
    # - вручную выбрано 'build_and_deploy' или 'build_only'
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.action == 'build_and_deploy' || github.event.inputs.action == 'build_only'))
    runs-on: ubuntu-latest
    outputs:
      image_tag_sha: ${{ steps.meta.outputs.version }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=short
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to Server
    # Запускаем деплой если:
    # - это пуш в main (после сборки)
    # - вручную выбрано 'build_and_deploy' (после сборки)
    # - вручную выбрано 'deploy_only'
    needs: build
    if: |
      (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'build_and_deploy')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy_only')
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail
            cd ${{ secrets.WORK_DIR }}

            if [[ "${{ github.event.inputs.action }}" == "deploy_only" ]]; then
              IMAGE_TAG="${{ github.event.inputs.image_tag }}"
            else
              IMAGE_TAG="${{ needs.build.outputs.image_tag_sha }}"
            fi

            export BOT_IMAGE="ghcr.io/${{ github.repository }}:$IMAGE_TAG"
            echo "--- Deploying image: $BOT_IMAGE"

            echo "--- Updating .env file with BOT_TOKEN"
            sed -i '/^#\?BOT_TOKEN=/d' .env
            echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" >> .env

            echo "--- Pulling new image"
            docker compose pull

            echo "--- Restarting container"
            docker compose up -d --force-recreate

            echo "--- Pruning old images"
            docker image prune -af

  stop:
    name: Stop Bot
    # Запускаем остановку только если выбрано вручную
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'stop'
    runs-on: ubuntu-latest
    steps:
      - name: Stop bot on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail
            cd ${{ secrets.WORK_DIR }}
            echo "--- Stopping bot..."
            docker compose down
            echo "--- Bot stopped."