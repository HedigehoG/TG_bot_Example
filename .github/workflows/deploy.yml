name: Build and Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image_name: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          # Используем имя репозитория для имени образа.
          # `metadata-action` автоматически приведет имя владельца к нижнему регистру.
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    # Явно определяем переменные окружения из секретов для наглядности.
    # Задача завершится с более понятной ошибкой, если эти секреты не установлены.
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      WORK_DIR: ${{ secrets.WORK_DIR }}
      # Публичный ключ для верификации. Не обязателен для деплоя, но помогает в отладке.
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

    steps:
      - name: Verify SSH keys
        # Этот шаг проверяет, что приватный ключ в секретах соответствует публичному.
        # Это помогает выявить ошибки копирования ключей в секреты GitHub.
        run: |
          if [ -z "${{ env.SSH_PRIVATE_KEY }}" ]; then echo "Error: SSH_PRIVATE_KEY secret is not set." >&2; exit 1; fi
          if [ -n "${{ env.SSH_PUBLIC_KEY }}" ]; then
            echo "Verifying that the public key matches the private key..."
            echo "${{ env.SSH_PRIVATE_KEY }}" > private_key.pem
            chmod 600 private_key.pem
            GENERATED_PUB_KEY_DATA=$(ssh-keygen -y -f private_key.pem | awk '{print $1, $2}')
            SECRET_PUB_KEY_DATA=$(echo "${{ env.SSH_PUBLIC_KEY }}" | awk '{print $1, $2}')
            if [ "$GENERATED_PUB_KEY_DATA" == "$SECRET_PUB_KEY_DATA" ]; then
              echo "SSH key pair is valid."
            else
              echo "Error: Mismatch between private and public key! Please check your GitHub secrets." >&2
              echo "This usually happens due to a copy-paste error." >&2
              exit 1
            fi
          fi
      - name: Add server fingerprint to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          port: ${{ env.PORT }}
          script: |
            cd ${{ env.WORK_DIR }}
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d --remove-orphans
            echo "Deployment successful"
